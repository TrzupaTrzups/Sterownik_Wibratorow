
sterownik_wibratorow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000006c8  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000713  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f3  00000000  00000000  000007b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093b  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000879  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000023e  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ad  00000000  00000000  00003036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000036e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000626  00000626  000006ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000377c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.triac_pulse 00000016  000005e0  000005e0  00000674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 00000022  0000056c  0000056c  00000600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_11 00000048  00000442  00000442  000004d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.timer1_start 00000038  00000506  00000506  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.timer1_stop 00000010  0000060c  0000060c  000006a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.setup   00000040  0000048a  0000048a  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.read_adc 0000001c  000005ac  000005ac  00000640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.loop    00000072  00000382  00000382  00000416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.modbus_write_handler 0000002e  0000053e  0000053e  000005d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    0000000a  0000061c  0000061c  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.triac_enable 00000001  0080010c  0080010c  000006c8  2**0
                  ALLOC
 26 .bss.current_raw 00000002  00800108  00800108  000006c8  2**0
                  ALLOC
 27 .bss.zero_cross_detected 00000001  0080010d  0080010d  000006c8  2**0
                  ALLOC
 28 .bss.power_setting 00000002  0080010a  0080010a  000006c8  2**0
                  ALLOC
 29 .text.modbus_crc 0000003c  000004ca  000004ca  0000055e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.modbus_init 00000018  000005c8  000005c8  0000065c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_18 0000004e  000003f4  000003f4  00000488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.modbus_poll 000002c0  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss.frame_ready 00000001  0080010e  0080010e  000006c8  2**0
                  ALLOC
 34 .bss.rx_index 00000001  0080010f  0080010f  000006c8  2**0
                  ALLOC
 35 .text.libgcc.mul 0000001e  0000058e  0000058e  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_fini 00000002  0000062e  0000062e  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_funcs_on_exit 00000002  00000630  00000630  000006c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_simulator_exit 00000002  00000632  00000632  000006c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.exit    00000016  000005f6  000005f6  0000068a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text._Exit   00000004  0000062a  0000062a  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
   8:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
   c:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  10:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__vector_4>
  14:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  18:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  1c:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  20:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  24:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  28:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  2c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_11>
  30:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  34:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  38:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  3c:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  40:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  44:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  48:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_18>
  4c:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  50:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  54:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  58:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  5c:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  60:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>
  64:	0c 94 13 03 	jmp	0x626	; 0x626 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 10       	cpse	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  ba:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000626 <__bad_interrupt>:
 626:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.triac_pulse:

000005e0 <triac_pulse>:
volatile uint8_t zero_cross_detected = 0;
volatile uint16_t current_raw = 0;
volatile uint8_t triac_enable = 0;       // 1 = w³¹czony, 0 = wy³¹czony (domyœlnie wy³¹czony)

void triac_pulse() {
	TRIAC_PORT |= (1 << TRIAC_PIN);
 5e0:	85 b1       	in	r24, 0x05	; 5
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e6:	81 e2       	ldi	r24, 0x21	; 33
 5e8:	8a 95       	dec	r24
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <triac_pulse+0x8>
 5ec:	00 00       	nop
	_delay_us(100);
	TRIAC_PORT &= ~(1 << TRIAC_PIN);
 5ee:	85 b1       	in	r24, 0x05	; 5
 5f0:	8e 7f       	andi	r24, 0xFE	; 254
 5f2:	85 b9       	out	0x05, r24	; 5
 5f4:	08 95       	ret

Disassembly of section .text.__vector_4:

0000056c <__vector_4>:
}

ISR(PCINT1_vect) {
 56c:	1f 92       	push	r1
 56e:	0f 92       	push	r0
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	0f 92       	push	r0
 574:	11 24       	eor	r1, r1
 576:	8f 93       	push	r24
	if (!(PINC & (1 << ZERO_CROSS_PIN))) {
 578:	32 99       	sbic	0x06, 2	; 6
 57a:	03 c0       	rjmp	.+6      	; 0x582 <__vector_4+0x16>
		zero_cross_detected = 1;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <zero_cross_detected>
	}
}
 582:	8f 91       	pop	r24
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

Disassembly of section .text.__vector_11:

00000442 <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	triac_pulse();
 464:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <triac_pulse>
}
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

Disassembly of section .text.timer1_start:

00000506 <timer1_start>:

void timer1_start(uint16_t delay_us) {
	TCCR1A = 0;
 506:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 50a:	e1 e8       	ldi	r30, 0x81	; 129
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	10 82       	st	Z, r1
	OCR1A = (F_CPU / 1000000) * delay_us / 8;
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	96 95       	lsr	r25
 51a:	87 95       	ror	r24
 51c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 520:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0;
 524:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 528:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B |= (1 << WGM12) | (1 << CS11);
 52c:	80 81       	ld	r24, Z
 52e:	8a 60       	ori	r24, 0x0A	; 10
 530:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);
 532:	ef e6       	ldi	r30, 0x6F	; 111
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	82 60       	ori	r24, 0x02	; 2
 53a:	80 83       	st	Z, r24
 53c:	08 95       	ret

Disassembly of section .text.timer1_stop:

0000060c <timer1_stop>:
}

void timer1_stop(void) {
	TCCR1B = 0;
 60c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 &= ~(1 << OCIE1A);
 610:	ef e6       	ldi	r30, 0x6F	; 111
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	8d 7f       	andi	r24, 0xFD	; 253
 618:	80 83       	st	Z, r24
 61a:	08 95       	ret

Disassembly of section .text.setup:

0000048a <setup>:
}

void setup() {
	DDRB |= (1 << TRIAC_PIN);
 48a:	84 b1       	in	r24, 0x04	; 4
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DIR_PIN);
 490:	8a b1       	in	r24, 0x0a	; 10
 492:	84 60       	ori	r24, 0x04	; 4
 494:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << ZERO_CROSS_PIN);
 496:	87 b1       	in	r24, 0x07	; 7
 498:	8b 7f       	andi	r24, 0xFB	; 251
 49a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << ZERO_CROSS_PIN);
 49c:	88 b1       	in	r24, 0x08	; 8
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	88 b9       	out	0x08, r24	; 8

	ADMUX = (1 << REFS0);
 4a2:	80 e4       	ldi	r24, 0x40	; 64
 4a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
 4a8:	86 e8       	ldi	r24, 0x86	; 134
 4aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	PCICR |= (1 << PCIE1);
 4ae:	e8 e6       	ldi	r30, 0x68	; 104
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);
 4b8:	ec e6       	ldi	r30, 0x6C	; 108
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	84 60       	ori	r24, 0x04	; 4
 4c0:	80 83       	st	Z, r24

	sei();
 4c2:	78 94       	sei
	modbus_init();
 4c4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <modbus_init>
 4c8:	08 95       	ret

Disassembly of section .text.read_adc:

000005ac <read_adc>:
}

uint16_t read_adc(void) {
	ADCSRA |= (1 << ADSC);
 5ac:	ea e7       	ldi	r30, 0x7A	; 122
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	80 64       	ori	r24, 0x40	; 64
 5b4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 5b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 5ba:	86 fd       	sbrc	r24, 6
 5bc:	fc cf       	rjmp	.-8      	; 0x5b6 <read_adc+0xa>
	return ADC;
 5be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 5c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 5c6:	08 95       	ret

Disassembly of section .text.loop:

00000382 <loop>:

void loop() {
	modbus_poll();
 382:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
	current_raw = read_adc();
 386:	0e 94 d6 02 	call	0x5ac	; 0x5ac <read_adc>
 38a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_end+0x1>
 38e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_end>

	if (zero_cross_detected) {
 392:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <zero_cross_detected>
 396:	88 23       	and	r24, r24
 398:	61 f1       	breq	.+88     	; 0x3f2 <loop+0x70>
		zero_cross_detected = 0;
 39a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <zero_cross_detected>

		if (triac_enable && power_setting > 0) {
 39e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <triac_enable>
 3a2:	88 23       	and	r24, r24
 3a4:	21 f1       	breq	.+72     	; 0x3ee <loop+0x6c>
 3a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <power_setting>
 3aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <power_setting+0x1>
 3ae:	89 2b       	or	r24, r25
 3b0:	f1 f0       	breq	.+60     	; 0x3ee <loop+0x6c>
			uint16_t delay = 5000 - ((power_setting * 5) / 10);
 3b2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <power_setting>
 3b6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <power_setting+0x1>
 3ba:	c9 01       	movw	r24, r18
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	28 0f       	add	r18, r24
 3c6:	39 1f       	adc	r19, r25
 3c8:	ad ec       	ldi	r26, 0xCD	; 205
 3ca:	bc ec       	ldi	r27, 0xCC	; 204
 3cc:	0e 94 c7 02 	call	0x58e	; 0x58e <__umulhisi3>
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	96 95       	lsr	r25
 3da:	87 95       	ror	r24
			timer1_start(delay);
 3dc:	28 e8       	ldi	r18, 0x88	; 136
 3de:	33 e1       	ldi	r19, 0x13	; 19
 3e0:	a9 01       	movw	r20, r18
 3e2:	48 1b       	sub	r20, r24
 3e4:	59 0b       	sbc	r21, r25
 3e6:	ca 01       	movw	r24, r20
 3e8:	0e 94 83 02 	call	0x506	; 0x506 <timer1_start>
	current_raw = read_adc();

	if (zero_cross_detected) {
		zero_cross_detected = 0;

		if (triac_enable && power_setting > 0) {
 3ec:	08 95       	ret
			uint16_t delay = 5000 - ((power_setting * 5) / 10);
			timer1_start(delay);
			} else {
			timer1_stop();
 3ee:	0e 94 06 03 	call	0x60c	; 0x60c <timer1_stop>
 3f2:	08 95       	ret

Disassembly of section .text.modbus_write_handler:

0000053e <modbus_write_handler>:
		}
	}
}

void modbus_write_handler(uint16_t addr, uint16_t value) {
	if (addr == 0x0001) {
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	91 05       	cpc	r25, r1
 542:	59 f4       	brne	.+22     	; 0x55a <modbus_write_handler+0x1c>
		if (value > 1000) value = 1000;
 544:	69 3e       	cpi	r22, 0xE9	; 233
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	78 07       	cpc	r23, r24
 54a:	10 f0       	brcs	.+4      	; 0x550 <modbus_write_handler+0x12>
 54c:	68 ee       	ldi	r22, 0xE8	; 232
 54e:	73 e0       	ldi	r23, 0x03	; 3
		power_setting = value;
 550:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <power_setting+0x1>
 554:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <power_setting>
 558:	08 95       	ret
		} else if (addr == 0x0003) {
 55a:	03 97       	sbiw	r24, 0x03	; 3
 55c:	31 f4       	brne	.+12     	; 0x56a <modbus_write_handler+0x2c>
		triac_enable = (value != 0);
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	67 2b       	or	r22, r23
 562:	09 f4       	brne	.+2      	; 0x566 <modbus_write_handler+0x28>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <triac_enable>
 56a:	08 95       	ret

Disassembly of section .text.main:

0000061c <main>:
	}
}

int main(void) {
	setup();
 61c:	0e 94 45 02 	call	0x48a	; 0x48a <setup>
	while (1) {
		loop();
 620:	0e 94 c1 01 	call	0x382	; 0x382 <loop>
 624:	fd cf       	rjmp	.-6      	; 0x620 <main+0x4>

Disassembly of section .text.modbus_crc:

000004ca <modbus_crc>:

extern volatile uint8_t power_setting;
extern volatile uint16_t current_raw;
extern volatile uint8_t triac_enable;

uint16_t modbus_crc(uint8_t *buf, uint8_t len) {
 4ca:	ac 01       	movw	r20, r24
	uint16_t crc = 0xFFFF;
	for (uint8_t pos = 0; pos < len; pos++) {
 4cc:	30 e0       	ldi	r19, 0x00	; 0
extern volatile uint8_t power_setting;
extern volatile uint16_t current_raw;
extern volatile uint8_t triac_enable;

uint16_t modbus_crc(uint8_t *buf, uint8_t len) {
	uint16_t crc = 0xFFFF;
 4ce:	8f ef       	ldi	r24, 0xFF	; 255
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
	for (uint8_t pos = 0; pos < len; pos++) {
 4d2:	16 c0       	rjmp	.+44     	; 0x500 <modbus_crc+0x36>
		crc ^= (uint16_t)buf[pos];
 4d4:	fa 01       	movw	r30, r20
 4d6:	e3 0f       	add	r30, r19
 4d8:	f1 1d       	adc	r31, r1
 4da:	20 81       	ld	r18, Z
 4dc:	82 27       	eor	r24, r18
		for (uint8_t i = 8; i != 0; i--) {
 4de:	28 e0       	ldi	r18, 0x08	; 8
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <modbus_crc+0x30>
			if ((crc & 0x0001) != 0) {
 4e2:	80 ff       	sbrs	r24, 0
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <modbus_crc+0x2a>
				crc >>= 1;
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
				crc ^= 0xA001;
 4ea:	71 e0       	ldi	r23, 0x01	; 1
 4ec:	87 27       	eor	r24, r23
 4ee:	70 ea       	ldi	r23, 0xA0	; 160
 4f0:	97 27       	eor	r25, r23
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <modbus_crc+0x2e>
				} else {
				crc >>= 1;
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24

uint16_t modbus_crc(uint8_t *buf, uint8_t len) {
	uint16_t crc = 0xFFFF;
	for (uint8_t pos = 0; pos < len; pos++) {
		crc ^= (uint16_t)buf[pos];
		for (uint8_t i = 8; i != 0; i--) {
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	21 11       	cpse	r18, r1
 4fc:	f2 cf       	rjmp	.-28     	; 0x4e2 <modbus_crc+0x18>
extern volatile uint16_t current_raw;
extern volatile uint8_t triac_enable;

uint16_t modbus_crc(uint8_t *buf, uint8_t len) {
	uint16_t crc = 0xFFFF;
	for (uint8_t pos = 0; pos < len; pos++) {
 4fe:	3f 5f       	subi	r19, 0xFF	; 255
 500:	36 17       	cp	r19, r22
 502:	40 f3       	brcs	.-48     	; 0x4d4 <modbus_crc+0xa>
				crc >>= 1;
			}
		}
	}
	return crc;
}
 504:	08 95       	ret

Disassembly of section .text.modbus_init:

000005c8 <modbus_init>:

void modbus_init(void) {
	UBRR0H = (BAUD_PRESCALE >> 8);
 5c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALE;
 5cc:	8c e0       	ldi	r24, 0x0C	; 12
 5ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 5d2:	88 e9       	ldi	r24, 0x98	; 152
 5d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 5d8:	86 e0       	ldi	r24, 0x06	; 6
 5da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5de:	08 95       	ret

Disassembly of section .text.__vector_18:

000003f4 <__vector_18>:
}

ISR(USART_RX_vect) {
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	8f 93       	push	r24
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	if (rx_index < sizeof(rx_buffer)) {
 404:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_index>
 408:	88 30       	cpi	r24, 0x08	; 8
 40a:	98 f4       	brcc	.+38     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		rx_buffer[rx_index++] = UDR0;
 40c:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <rx_index>
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	8e 0f       	add	r24, r30
 414:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx_index>
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 41e:	e0 50       	subi	r30, 0x00	; 0
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	80 83       	st	Z, r24
		if (rx_index >= 8) {
 424:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rx_index>
 428:	88 30       	cpi	r24, 0x08	; 8
 42a:	18 f0       	brcs	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			frame_ready = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <frame_ready>
		}
	}
}
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

Disassembly of section .text.modbus_poll:

000000c2 <modbus_poll>:

void modbus_poll(void) {
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	27 97       	sbiw	r28, 0x07	; 7
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	if (!frame_ready) return;
  dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <frame_ready>
  e0:	88 23       	and	r24, r24
  e2:	09 f4       	brne	.+2      	; 0xe6 <modbus_poll+0x24>
  e4:	42 c1       	rjmp	.+644    	; 0x36a <modbus_poll+0x2a8>
	frame_ready = 0;
  e6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <frame_ready>

	if (rx_buffer[0] != MODBUS_ADDRESS) {
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	19 f0       	breq	.+6      	; 0xf8 <modbus_poll+0x36>
		rx_index = 0;
  f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_index>
		return;
  f6:	39 c1       	rjmp	.+626    	; 0x36a <modbus_poll+0x2a8>
	}

	uint8_t func = rx_buffer[1];
  f8:	00 e0       	ldi	r16, 0x00	; 0
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	f8 01       	movw	r30, r16
  fe:	f1 80       	ldd	r15, Z+1	; 0x01
	uint16_t crc = modbus_crc(rx_buffer, 6);
 100:	66 e0       	ldi	r22, 0x06	; 6
 102:	c8 01       	movw	r24, r16
 104:	0e 94 65 02 	call	0x4ca	; 0x4ca <modbus_crc>
	uint16_t crc_received = (rx_buffer[7] << 8) | rx_buffer[6];
 108:	f8 01       	movw	r30, r16
 10a:	27 81       	ldd	r18, Z+7	; 0x07
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	32 2f       	mov	r19, r18
 110:	22 27       	eor	r18, r18
 112:	46 81       	ldd	r20, Z+6	; 0x06
 114:	24 2b       	or	r18, r20
	if (crc != crc_received) {
 116:	82 17       	cp	r24, r18
 118:	93 07       	cpc	r25, r19
 11a:	19 f0       	breq	.+6      	; 0x122 <modbus_poll+0x60>
		rx_index = 0;
 11c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_index>
		return;
 120:	24 c1       	rjmp	.+584    	; 0x36a <modbus_poll+0x2a8>
	}

	uint16_t reg_addr = (rx_buffer[2] << 8) | rx_buffer[3];
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	82 81       	ldd	r24, Z+2	; 0x02
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	98 2f       	mov	r25, r24
 12c:	88 27       	eor	r24, r24
 12e:	23 81       	ldd	r18, Z+3	; 0x03
 130:	82 2b       	or	r24, r18
 132:	ac 01       	movw	r20, r24
	uint16_t reg_value = (rx_buffer[4] << 8) | rx_buffer[5];
 134:	64 81       	ldd	r22, Z+4	; 0x04
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	76 2f       	mov	r23, r22
 13a:	66 27       	eor	r22, r22
 13c:	25 81       	ldd	r18, Z+5	; 0x05
 13e:	62 2b       	or	r22, r18
 140:	9b 01       	movw	r18, r22

	if (func == 0x06) {
 142:	f6 e0       	ldi	r31, 0x06	; 6
 144:	ff 12       	cpse	r15, r31
 146:	37 c0       	rjmp	.+110    	; 0x1b6 <modbus_poll+0xf4>
		modbus_write_handler(reg_addr, reg_value);
 148:	0e 94 9f 02 	call	0x53e	; 0x53e <modbus_write_handler>
		DIR_PORT |= (1 << DIR_PIN);
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8b b9       	out	0x0b, r24	; 11
 152:	81 e2       	ldi	r24, 0x21	; 33
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <modbus_poll+0x92>
 158:	00 00       	nop
		_delay_us(100);
		for (uint8_t i = 0; i < 6; i++) {
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0c c0       	rjmp	.+24     	; 0x176 <modbus_poll+0xb4>
			while (!(UCSR0A & (1 << UDRE0))) ;
 15e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 162:	85 ff       	sbrs	r24, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <modbus_poll+0x9c>
			UDR0 = rx_buffer[i];
 166:	e9 2f       	mov	r30, r25
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	80 81       	ld	r24, Z
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (func == 0x06) {
		modbus_write_handler(reg_addr, reg_value);
		DIR_PORT |= (1 << DIR_PIN);
		_delay_us(100);
		for (uint8_t i = 0; i < 6; i++) {
 174:	9f 5f       	subi	r25, 0xFF	; 255
 176:	96 30       	cpi	r25, 0x06	; 6
 178:	90 f3       	brcs	.-28     	; 0x15e <modbus_poll+0x9c>
			while (!(UCSR0A & (1 << UDRE0))) ;
			UDR0 = rx_buffer[i];
		}
		crc = modbus_crc(rx_buffer, 6);
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 65 02 	call	0x4ca	; 0x4ca <modbus_crc>
		while (!(UCSR0A & (1 << UDRE0))) ; UDR0 = crc & 0xFF;
 184:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 188:	25 ff       	sbrs	r18, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <modbus_poll+0xc2>
 18c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while (!(UCSR0A & (1 << UDRE0))) ; UDR0 = crc >> 8;
 190:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 194:	85 ff       	sbrs	r24, 5
 196:	fc cf       	rjmp	.-8      	; 0x190 <modbus_poll+0xce>
 198:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		while (!(UCSR0A & (1 << TXC0))) ; UCSR0A |= (1 << TXC0);
 19c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a0:	86 ff       	sbrs	r24, 6
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <modbus_poll+0xda>
 1a4:	e0 ec       	ldi	r30, 0xC0	; 192
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
		DIR_PORT &= ~(1 << DIR_PIN);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8b 7f       	andi	r24, 0xFB	; 251
 1b2:	8b b9       	out	0x0b, r24	; 11
 1b4:	d8 c0       	rjmp	.+432    	; 0x366 <modbus_poll+0x2a4>
	}
	else if (func == 0x03 || func == 0x04) {
 1b6:	8d ef       	ldi	r24, 0xFD	; 253
 1b8:	8f 0d       	add	r24, r15
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <modbus_poll+0xfe>
 1be:	4d c0       	rjmp	.+154    	; 0x25a <modbus_poll+0x198>
		uint8_t response[7];
		response[0] = rx_buffer[0];
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	89 83       	std	Y+1, r24	; 0x01
		response[1] = func;
 1c6:	fa 82       	std	Y+2, r15	; 0x02
		response[2] = 2;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	8b 83       	std	Y+3, r24	; 0x03

		uint16_t value = 0;
		if (reg_addr == 0x0001) {
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	51 05       	cpc	r21, r1
 1d0:	21 f4       	brne	.+8      	; 0x1da <modbus_poll+0x118>
			value = power_setting;
 1d2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <power_setting>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	11 c0       	rjmp	.+34     	; 0x1fc <modbus_poll+0x13a>
			} else if (reg_addr == 0x0002) {
 1da:	42 30       	cpi	r20, 0x02	; 2
 1dc:	51 05       	cpc	r21, r1
 1de:	29 f4       	brne	.+10     	; 0x1ea <modbus_poll+0x128>
			value = current_raw;
 1e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_end>
 1e4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_end+0x1>
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <modbus_poll+0x13a>
			} else if (reg_addr == 0x0003) {
 1ea:	43 30       	cpi	r20, 0x03	; 3
 1ec:	51 05       	cpc	r21, r1
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <modbus_poll+0x136>
			value = triac_enable;
 1f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <triac_enable>
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <modbus_poll+0x13a>
		uint8_t response[7];
		response[0] = rx_buffer[0];
		response[1] = func;
		response[2] = 2;

		uint16_t value = 0;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
			value = current_raw;
			} else if (reg_addr == 0x0003) {
			value = triac_enable;
		}

		response[3] = value >> 8;
 1fc:	9c 83       	std	Y+4, r25	; 0x04
		response[4] = value & 0xFF;
 1fe:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t r_crc = modbus_crc(response, 5);
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	0e 94 65 02 	call	0x4ca	; 0x4ca <modbus_crc>
		response[5] = r_crc & 0xFF;
 20a:	8e 83       	std	Y+6, r24	; 0x06
		response[6] = r_crc >> 8;
 20c:	9f 83       	std	Y+7, r25	; 0x07

		DIR_PORT |= (1 << DIR_PIN);
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	84 60       	ori	r24, 0x04	; 4
 212:	8b b9       	out	0x0b, r24	; 11
 214:	e1 e2       	ldi	r30, 0x21	; 33
 216:	ea 95       	dec	r30
 218:	f1 f7       	brne	.-4      	; 0x216 <modbus_poll+0x154>
 21a:	00 00       	nop
		_delay_us(100);
		for (uint8_t i = 0; i < 7; i++) {
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e c0       	rjmp	.+28     	; 0x23c <modbus_poll+0x17a>
			while (!(UCSR0A & (1 << UDRE0))) ;
 220:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 224:	85 ff       	sbrs	r24, 5
 226:	fc cf       	rjmp	.-8      	; 0x220 <modbus_poll+0x15e>
			UDR0 = response[i];
 228:	e1 e0       	ldi	r30, 0x01	; 1
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ec 0f       	add	r30, r28
 22e:	fd 1f       	adc	r31, r29
 230:	e9 0f       	add	r30, r25
 232:	f1 1d       	adc	r31, r1
 234:	80 81       	ld	r24, Z
 236:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		response[5] = r_crc & 0xFF;
		response[6] = r_crc >> 8;

		DIR_PORT |= (1 << DIR_PIN);
		_delay_us(100);
		for (uint8_t i = 0; i < 7; i++) {
 23a:	9f 5f       	subi	r25, 0xFF	; 255
 23c:	97 30       	cpi	r25, 0x07	; 7
 23e:	80 f3       	brcs	.-32     	; 0x220 <modbus_poll+0x15e>
			while (!(UCSR0A & (1 << UDRE0))) ;
			UDR0 = response[i];
		}
		while (!(UCSR0A & (1 << TXC0))) ; UCSR0A |= (1 << TXC0);
 240:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 244:	86 ff       	sbrs	r24, 6
 246:	fc cf       	rjmp	.-8      	; 0x240 <modbus_poll+0x17e>
 248:	e0 ec       	ldi	r30, 0xC0	; 192
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	80 83       	st	Z, r24
		DIR_PORT &= ~(1 << DIR_PIN);
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	8b b9       	out	0x0b, r24	; 11
 258:	86 c0       	rjmp	.+268    	; 0x366 <modbus_poll+0x2a4>
	}
	else if (func == 0x05) { // Write Single Coil
 25a:	f5 e0       	ldi	r31, 0x05	; 5
 25c:	ff 12       	cpse	r15, r31
 25e:	45 c0       	rjmp	.+138    	; 0x2ea <modbus_poll+0x228>
		if (reg_addr == 0x0001) {
 260:	41 30       	cpi	r20, 0x01	; 1
 262:	51 05       	cpc	r21, r1
 264:	09 f0       	breq	.+2      	; 0x268 <modbus_poll+0x1a6>
 266:	7f c0       	rjmp	.+254    	; 0x366 <modbus_poll+0x2a4>
			if (reg_value == 0xFF00) {
 268:	21 15       	cp	r18, r1
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	38 07       	cpc	r19, r24
 26e:	21 f4       	brne	.+8      	; 0x278 <modbus_poll+0x1b6>
				triac_enable = 1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <triac_enable>
 276:	04 c0       	rjmp	.+8      	; 0x280 <modbus_poll+0x1be>
				} else if (reg_value == 0x0000) {
 278:	23 2b       	or	r18, r19
 27a:	11 f4       	brne	.+4      	; 0x280 <modbus_poll+0x1be>
				triac_enable = 0;
 27c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <triac_enable>
			}

			DIR_PORT |= (1 << DIR_PIN);
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	84 60       	ori	r24, 0x04	; 4
 284:	8b b9       	out	0x0b, r24	; 11
 286:	e1 e2       	ldi	r30, 0x21	; 33
 288:	ea 95       	dec	r30
 28a:	f1 f7       	brne	.-4      	; 0x288 <modbus_poll+0x1c6>
 28c:	00 00       	nop
			_delay_us(100);
			for (uint8_t i = 0; i < 6; i++) {
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0c c0       	rjmp	.+24     	; 0x2aa <modbus_poll+0x1e8>
				while (!(UCSR0A & (1 << UDRE0))) ;
 292:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 296:	85 ff       	sbrs	r24, 5
 298:	fc cf       	rjmp	.-8      	; 0x292 <modbus_poll+0x1d0>
				UDR0 = rx_buffer[i];
 29a:	e9 2f       	mov	r30, r25
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	e0 50       	subi	r30, 0x00	; 0
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	80 81       	ld	r24, Z
 2a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				triac_enable = 0;
			}

			DIR_PORT |= (1 << DIR_PIN);
			_delay_us(100);
			for (uint8_t i = 0; i < 6; i++) {
 2a8:	9f 5f       	subi	r25, 0xFF	; 255
 2aa:	96 30       	cpi	r25, 0x06	; 6
 2ac:	90 f3       	brcs	.-28     	; 0x292 <modbus_poll+0x1d0>
				while (!(UCSR0A & (1 << UDRE0))) ;
				UDR0 = rx_buffer[i];
			}
			crc = modbus_crc(rx_buffer, 6);
 2ae:	66 e0       	ldi	r22, 0x06	; 6
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 65 02 	call	0x4ca	; 0x4ca <modbus_crc>
			while (!(UCSR0A & (1 << UDRE0))) ; UDR0 = crc & 0xFF;
 2b8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2bc:	25 ff       	sbrs	r18, 5
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <modbus_poll+0x1f6>
 2c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			while (!(UCSR0A & (1 << UDRE0))) ; UDR0 = crc >> 8;
 2c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2c8:	85 ff       	sbrs	r24, 5
 2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <modbus_poll+0x202>
 2cc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			while (!(UCSR0A & (1 << TXC0))) ; UCSR0A |= (1 << TXC0);
 2d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d4:	86 ff       	sbrs	r24, 6
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <modbus_poll+0x20e>
 2d8:	e0 ec       	ldi	r30, 0xC0	; 192
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24
			DIR_PORT &= ~(1 << DIR_PIN);
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	8b b9       	out	0x0b, r24	; 11
 2e8:	3e c0       	rjmp	.+124    	; 0x366 <modbus_poll+0x2a4>
		}
	}
	else if (func == 0x01) { // Read Coils
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	ff 12       	cpse	r15, r31
 2ee:	3b c0       	rjmp	.+118    	; 0x366 <modbus_poll+0x2a4>
		if (reg_addr == 0x0001) {
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	51 05       	cpc	r21, r1
 2f4:	c1 f5       	brne	.+112    	; 0x366 <modbus_poll+0x2a4>
			uint8_t response[6];
			response[0] = rx_buffer[0]; // slave ID
 2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fa:	89 83       	std	Y+1, r24	; 0x01
			response[1] = 0x01;         // function code
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	8a 83       	std	Y+2, r24	; 0x02
			response[2] = 0x01;         // byte count
 300:	8b 83       	std	Y+3, r24	; 0x03
			response[3] = triac_enable ? 0x01 : 0x00;
 302:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <triac_enable>
 306:	91 11       	cpse	r25, r1
 308:	01 c0       	rjmp	.+2      	; 0x30c <modbus_poll+0x24a>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	8c 83       	std	Y+4, r24	; 0x04
			uint16_t r_crc = modbus_crc(response, 4);
 30e:	64 e0       	ldi	r22, 0x04	; 4
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	0e 94 65 02 	call	0x4ca	; 0x4ca <modbus_crc>
			response[4] = r_crc & 0xFF;
 318:	8d 83       	std	Y+5, r24	; 0x05
			response[5] = r_crc >> 8;
 31a:	9e 83       	std	Y+6, r25	; 0x06

			DIR_PORT |= (1 << DIR_PIN);
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	84 60       	ori	r24, 0x04	; 4
 320:	8b b9       	out	0x0b, r24	; 11
 322:	81 e2       	ldi	r24, 0x21	; 33
 324:	8a 95       	dec	r24
 326:	f1 f7       	brne	.-4      	; 0x324 <modbus_poll+0x262>
 328:	00 00       	nop
			_delay_us(100);
			for (uint8_t i = 0; i < 6; i++) {
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e c0       	rjmp	.+28     	; 0x34a <modbus_poll+0x288>
				while (!(UCSR0A & (1 << UDRE0))) ;
 32e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 332:	85 ff       	sbrs	r24, 5
 334:	fc cf       	rjmp	.-8      	; 0x32e <modbus_poll+0x26c>
				UDR0 = response[i];
 336:	e1 e0       	ldi	r30, 0x01	; 1
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	ec 0f       	add	r30, r28
 33c:	fd 1f       	adc	r31, r29
 33e:	e9 0f       	add	r30, r25
 340:	f1 1d       	adc	r31, r1
 342:	80 81       	ld	r24, Z
 344:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			response[4] = r_crc & 0xFF;
			response[5] = r_crc >> 8;

			DIR_PORT |= (1 << DIR_PIN);
			_delay_us(100);
			for (uint8_t i = 0; i < 6; i++) {
 348:	9f 5f       	subi	r25, 0xFF	; 255
 34a:	96 30       	cpi	r25, 0x06	; 6
 34c:	80 f3       	brcs	.-32     	; 0x32e <modbus_poll+0x26c>
				while (!(UCSR0A & (1 << UDRE0))) ;
				UDR0 = response[i];
			}
			while (!(UCSR0A & (1 << TXC0))) ; UCSR0A |= (1 << TXC0);
 34e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 352:	86 ff       	sbrs	r24, 6
 354:	fc cf       	rjmp	.-8      	; 0x34e <modbus_poll+0x28c>
 356:	e0 ec       	ldi	r30, 0xC0	; 192
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 64       	ori	r24, 0x40	; 64
 35e:	80 83       	st	Z, r24
			DIR_PORT &= ~(1 << DIR_PIN);
 360:	8b b1       	in	r24, 0x0b	; 11
 362:	8b 7f       	andi	r24, 0xFB	; 251
 364:	8b b9       	out	0x0b, r24	; 11
		}
	}

	rx_index = 0;
 366:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rx_index>
}
 36a:	27 96       	adiw	r28, 0x07	; 7
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000058e <__umulhisi3>:
 58e:	a2 9f       	mul	r26, r18
 590:	b0 01       	movw	r22, r0
 592:	b3 9f       	mul	r27, r19
 594:	c0 01       	movw	r24, r0
 596:	a3 9f       	mul	r26, r19
 598:	70 0d       	add	r23, r0
 59a:	81 1d       	adc	r24, r1
 59c:	11 24       	eor	r1, r1
 59e:	91 1d       	adc	r25, r1
 5a0:	b2 9f       	mul	r27, r18
 5a2:	70 0d       	add	r23, r0
 5a4:	81 1d       	adc	r24, r1
 5a6:	11 24       	eor	r1, r1
 5a8:	91 1d       	adc	r25, r1
 5aa:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000062e <_fini>:
 62e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000630 <__funcs_on_exit>:
 630:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000632 <__simulator_exit>:
 632:	08 95       	ret

Disassembly of section .text.exit:

000005f6 <exit>:
 5f6:	ec 01       	movw	r28, r24
 5f8:	0e 94 18 03 	call	0x630	; 0x630 <__funcs_on_exit>
 5fc:	0e 94 17 03 	call	0x62e	; 0x62e <_fini>
 600:	ce 01       	movw	r24, r28
 602:	0e 94 19 03 	call	0x632	; 0x632 <__simulator_exit>
 606:	ce 01       	movw	r24, r28
 608:	0e 94 15 03 	call	0x62a	; 0x62a <_Exit>

Disassembly of section .text._Exit:

0000062a <_Exit>:
 62a:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
